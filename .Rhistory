print(x)
}
test <- subset(tracks.1004, select = c(uid_object, id_time, utm_east, utm_north, elevation))
test$uid_object <- (1:nrow(test))
for (i in test$uid_object) {
print(i)
}
for (i in test$id_time) {
print(i)
}
view(el)
library(ggplot2)
view(tracks.1004)
View(tracks.1004)
View(tracks)
test <- function(a) {
print(a)
}
test(soome)
test("soome")
test <- function(a = "default") {
print(a)
}
test("soome")
soom
soome
test(a = other)
test(a = "other")
setwd("C:/Users/Allen/Google Drive/01_Thesis/20160401_DryLakes_Survey")
library(ggplot2)
library(tidyr)
personalUID <- read.csv("./personalUID.csv", header = TRUE)
tracks <- read.csv("./dataCombined.csv", header = TRUE)
tracks$uid_person <- as.factor(tracks$uid_person)
tracks$elevation <- as.factor(tracks$elevation)
transect <- read.csv("./transect.csv", header = TRUE)
hr.1004 <- read.csv("./Data_HeartRate/heartrate_20160401_fattor_clean.csv", header = TRUE)
View(hr.1004)
tracks.1004 <- tracks[which(tracks$uid_person == "1004"),]
tracks.1004 <- tracks.1004[which(tracks.1004$id_time >= 43000 & tracks.1004$id_time <= 43500),]
test <- subset(tracks.1004, select = c(uid_object, id_time, utm_east, utm_north, elevation))
View(test)
setwd("C:/Users/Allen/Google Drive/01_Thesis")
library(ggplot2)
library(tidyr)
personalUID <- read.csv("./personalUID.csv", header = TRUE)
tracks <- read.csv("./20160401_DryLakes_Survey/dataCombined.csv", header = TRUE)
View(tracks)
tracks$uid_person <- as.factor(tracks$uid_person)
tracks$elevation <- as.factor(tracks$elevation)
transect <- read.csv("./transect.csv", header = TRUE)
hr.1004 <- read.csv("./Data_HeartRate/heartrate_20160401_fattor_clean.csv", header = TRUE)
hr.1004 <- read.csv("./20160401_DryLakes_Survey/Data_HeartRate/heartrate_20160401_fattor_clean.csv", header = TRUE)
tracks.1003 <- tracks[which(tracks$uid_person == "1003"),]
View(tracks.1003)
plot(tracks.1003$utm_east,tracks.1003$utm_north)
tracks <- read.csv("./20160401_DryLakes_Survey/dataCombined.csv", header = TRUE)
tracks$uid_person <- as.factor(tracks$uid_person)
tracks$elevation <- as.factor(tracks$elevation)
tracks.1003 <- tracks[which(tracks$uid_person == "1003"),]
plot(tracks.1003$utm_east,tracks.1003$utm_north)
plot(tracks.1003$id_time,tracks.1003$elevation)
View(tracks.1003)
head(tracks.1003)
acf(tracks.1003)
pacf(tracks.1003)
pacf(tracks.1003$elevation)
acf(tracks.1003$elevation)
install.packages("forecast")
install.packages(c("BH", "DBI", "openssl", "testthat", "zoo"))
install.packages("forecast")
install.packages("forecast")
library(forecast)
ndiffs(tracks.1003)
ndiffs(x = tracks.1003)
ndiffs(x = tracks.1003$elevation)
setwd("C:/Users/Allen/Google Drive/01_Thesis")
library(ggplot2)
library(tidyr)
library(forecast)
personalUID <- read.csv("./personalUID.csv", header = TRUE)
tracks <- read.csv("./20160401_DryLakes_Survey/dataCombined.csv", header = TRUE)
tracks$uid_person <- as.factor(tracks$uid_person)
tracks$elevation <- as.factor(tracks$elevation)
transect <- read.csv("./transect.csv", header = TRUE)
tracks.1003 <- tracks[which(tracks$uid_person == "1003"),]
??require()
remove(tracks.1003, tracks.1004, tracks.1009)
remove(hr.1004)
remove(el,test)
remove(dataNames, difference, fileNames, gpsClean, i,test2,x)
tracks.1003 <- tracks[tracks$uid_person == "1003"]
tracks.1003 <- tracks$elevation[tracks$uid_person == "1003"]
tracks.1003 <- tracks[which(tracks$uid_person == "1003"),]
View(tracks.1003)
tracks.1003 <- ts(tracks.1003, start = min(tracks.1003$id_time), end = max(tracks.1003$id_time))
tracks.1003
head(tracks.1003)
tracks.1003 <- tracks$elevation[tracks$uid_person == "1003"]
head(tracks.1003)
tracks.1003 <- ts(tracks.1003, start = min(tracks.1003$id_time), end = max(tracks.1003$id_time))
tracks.1003 <- ts(tracks[which(tracks$uid_person == "1003"),], start = min(tracks$id_time), end = max(tracks$id_time))
head(tracks.1003)
remove(tracks.1003)
tracks.1003.el <- tracks$elevation[tracks$uid_person == "1003"]
tracks.1003.el <- ts(tracks.1003, start = min(tracks$id_time), end = max(tracks$id_time))
tracks.1003.el <- ts(tracks.1003.el, start = min(tracks$id_time), end = max(tracks$id_time))
head(tracks.1003.el)
View(tracks)
plot(tracks.1003.el)
remove(tracks.1003.el)
View(transect)
transect <- read.csv("./transect.csv", header = TRUE)
View(transect)
View(personalUID)
tracks.1003 <- tracks[which(tracks$uid_person == "1003"),]
View(tracks.1003)
View(tracks.1003)
plot(tracks.1003$elevation)
plot(tracks.1003$id_time,tracks.1003$elevation)
tracks.1003.el <- tracks$elevation
remove(tracks.1003.el)
tracks.1003.el <- ts(tracks.1003$elevation, start = min(tracks.1003$id_time), end = max(tracks.1003$id_time))
plot(tracks.1003.el)
head(tracks.1003.el)
head(tracks.1003)
tracks <- read.csv("./20160401_DryLakes_Survey/dataCombined.csv", header = TRUE)
tracks.1003 <- tracks[which(tracks$uid_person == "1003"),]
tracks.1003.el <- ts(tracks.1003$elevation, start = min(tracks.1003$id_time), end = max(tracks.1003$id_time))
head(tracks.1003.el)
plot(tracks.1003.el)
tracks.1003.el
max(tracks.1003$id_time)
min(tracks.1003$id_time)
plot(tracks.1003$id_time,tracks.1003$elevation)
plot(tracks.1003.el, xlab = "Time", ylab = "Elevation")
acf(tracks.1003.el)
ndiffs(x = tracks.1003.el)
plot(diff(tracks.1003.el,0))
plot(diff(tracks.1003.el,1))
plot(diff(tracks.1003.el,5))
plot(diff(tracks.1003.el,10))
usBest <- auto.arima(x = tracks.1003.el)
usBest
plot(usBest$residuals)
remove(usBest)
plot(el.surface)
ggplot(tracks.1003, aes(x = tracks.1003$uid_object, y = tracks.1003$elevation)) + geom_point(shape = 5)
View(tracks.1003)
plot(tracks.1003.el)
smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation)
test <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation)
head(test)
plot(test$x,teset$y)
get.spline.info <- function(object)
{}
get.spline.info <- function(object)
{
data.frame(x = object$x, y = object$y, df = object$df)
}
test2 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 2)
test3 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 3)
test3 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 10)
test4 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 20)
test5 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 50)
test6 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 100)
test1 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation)
remove(test)
get.spline.info(test1)
test1 <- get.spline.info(test1)
test2 <- get.spline.info(test2)
test3 <- get.spline.info(test3)
test4 <- get.spline.info(test4)
test5 <- get.spline.info(test5)
test6 <- get.spline.info(test6)
require(plyr)
test1 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation)
test2 <- get.spline.info(test2)
test2 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 2)
test3 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 10)
test4 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 20)
test5 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 50)
test6 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 100)
splineDF <- ldply(list(test1,test2,test3,test4,test5,test6),get.spline.info)
head(splineDF)
g <- ggplot(tracks.1003, aes(x = $id_time, y = $elevation)) + geom_point()
g <- ggplot(tracks.1003, aes(x = id_time, y = elevation)) + geom_point()
library(ggplot2)
library(tidyr)
library(forecast)
g <- ggplot(tracks.1003, aes(x = id_time, y = elevation)) + geom_point()
g + geom_line(data = splineDF, aes(x = x, y = y, color = factor(round(df,0)), group = df)) + scale_color_discrete("Degrees of \nFreedom")
g + geom_line(data = test6)
g + geom_line(data = test6, aes(x = x, y = y))
test6.plot <- get.spline.info(test6)
g + geom_line(data = test6.plot, aes(x = x, y = y))
remove(g)
tracks.1003.plot + geom_line(data = test6.plot, aes(x = x, y = y))
+ xlab("Time [Julian]")
+ ylab("Elevation [m]")
setwd("C:/Users/Allen/Google Drive/01_Thesis")
library(ggplot2)
library(tidyr)
library(forecast)
############################ Create datasets ############################
personalUID <- read.csv("./personalUID.csv", header = TRUE)
tracks <- read.csv("./20160401_DryLakes_Survey/dataCombined.csv", header = TRUE)
tracks$uid_person <- as.factor(tracks$uid_person)
transect <- read.csv("./transect.csv", header = TRUE)
# hr.1004 <- read.csv("./20160401_DryLakes_Survey/Data_HeartRate/heartrate_20160401_fattor_clean.csv", header = TRUE)
############################ Rework data frames ############################
tracks.1003 <- tracks[which(tracks$uid_person == "1003"),]
tracks.1003.el <- ts(tracks.1003$elevation, start = min(tracks.1003$id_time), end = max(tracks.1003$id_time))
############################ Interpolation program ############################
test1 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation)
test2 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 2)
test3 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 10)
test4 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 20)
test5 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 50)
test6 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 100)
require(plyr)
splineDF <- ldply(list(test1,test2,test3,test4,test5,test6),get.spline.info)
head(splineDF)
############################ Create graphics ############################
tracks.1003.plot <- ggplot(tracks.1003, aes(x = id_time, y = elevation)) + geom_point()
tracks.1003.plot + geom_line(data = splineDF, aes(x = x, y = y, color = factor(round(df,0)), group = df))
+ scale_color_discrete("Degrees of \nFreedom")
+ xlab("Time [Julian]")
+ ylab("Elevation [m]")
test6.plot <- get.spline.info(test6)
tracks.1003.plot + geom_line(data = test6.plot, aes(x = x, y = y))
+ xlab("Time [Julian]")
+ ylab("Elevation [m]")
get.spline.info <- function(object)
{
data.frame(x = object$x, y = object$y, df = object$df)
}
require(plyr)
splineDF <- ldply(list(test1,test2,test3,test4,test5,test6),get.spline.info)
head(splineDF)
############################ Create graphics ############################
tracks.1003.plot <- ggplot(tracks.1003, aes(x = id_time, y = elevation)) + geom_point()
tracks.1003.plot + geom_line(data = splineDF, aes(x = x, y = y, color = factor(round(df,0)), group = df))
+ scale_color_discrete("Degrees of \nFreedom")
+ xlab("Time [Julian]")
+ ylab("Elevation [m]")
test6.plot <- get.spline.info(test6)
tracks.1003.plot + geom_line(data = test6.plot, aes(x = x, y = y))
+ xlab("Time [Julian]")
+ ylab("Elevation [m]")
tracks.1003.plot + geom_line(data = test6.plot, aes(x = x, y = y))
+ xlab("Time")
+ ylab("Elevation")
tracks.1003.plot + geom_line(data = test6.plot, aes(x = x, y = y)) +
xlab("Time") +
ylab("Elevation")
tracks.1003.plot + geom_line(data = splineDF, aes(x = x, y = y, color = factor(round(df,0)), group = df)) +
scale_color_discrete("Degrees of \nFreedom") +
xlab("Time [Julian]") +
ylab("Elevation [m]")
tracks.1003.plot <- ggplot(tracks.1003, aes(x = id_time, y = elevation)) + geom_point()
tracks.1003.plot + geom_line(data = splineDF, aes(x = x, y = y, color = factor(round(df,0)), group = df)) +
scale_color_discrete("Degrees of \nFreedom") +
xlab("Time [Julian]") +
ylab("Elevation [m]")
test6.plot <- get.spline.info(test6)
tracks.1003.plot + geom_line(data = test6.plot, aes(x = x, y = y)) +
xlab("Time [Julian]") +
ylab("Elevation [m]")
# Title: WR575 GPS Track Records Cleaning
#
# Created by: R. Allen Gilbert Jr.
#
# Date created: 20160405
#
# Purpose: To process a NED 1/3 arc-second elevation surface for use in an agent-based model that models human movement
# across a snow surface.
#
# Process: The ~10m elevation model is first resampled to 1m cells. Surface roughness is created by adding randomly
# generated values to the existing resampled surface. The user creates a snow surface by adding the desired depth of
# snow to the surface roughness layer and applying a low pass filter to smooth the result. The user creates a depth
# reference layer by subtracting the surface roughness layer from the snow layer. If the underlying surface roughness
# layer is above the snow surface, the value is set to 0 to indicate a depth of 0. This depth surface is exported
# for use in the model. Adjustments are made to the snow surface layer by adding the height of those cells that
# were above the snow during the creation of the depth reference layer. Finally, local slope is calculated and exported
# for use in the model.
############################ Set working directory and load libraries ############################
setwd("C:/Users/Allen/Google Drive/01_Thesis")
library(ggplot2)
library(tidyr)
library(forecast)
############################ Create datasets ############################
personalUID <- read.csv("./personalUID.csv", header = TRUE)
tracks <- read.csv("./20160401_DryLakes_Survey/dataCombined.csv", header = TRUE)
tracks$uid_person <- as.factor(tracks$uid_person)
transect <- read.csv("./transect.csv", header = TRUE)
# hr.1004 <- read.csv("./20160401_DryLakes_Survey/Data_HeartRate/heartrate_20160401_fattor_clean.csv", header = TRUE)
############################ Rework data frames ############################
tracks.1003 <- tracks[which(tracks$uid_person == "1003"),]
tracks.1003.el <- ts(tracks.1003$elevation, start = min(tracks.1003$id_time), end = max(tracks.1003$id_time))
############################ Interpolation program ############################
test1 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation)
test2 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 2)
test3 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 10)
test4 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 20)
test5 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 50)
test6 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 100)
get.spline.info <- function(object)
{
data.frame(x = object$x, y = object$y, df = object$df)
}
require(plyr)
splineDF <- ldply(list(test1,test2,test3,test4,test5,test6),get.spline.info)
head(splineDF)
############################ Create graphics ############################
tracks.1003.plot <- ggplot(tracks.1003, aes(x = id_time, y = elevation)) + geom_point()
tracks.1003.plot + geom_line(data = splineDF, aes(x = x, y = y, color = factor(round(df,0)), group = df)) +
scale_color_discrete("Degrees of \nFreedom") +
xlab("Time [Julian]") +
ylab("Elevation [m]")
test6.plot <- get.spline.info(test6)
tracks.1003.plot + geom_line(data = test6.plot, aes(x = x, y = y)) +
xlab("Time [Julian]") +
ylab("Elevation [m]")
############################ Retreive interpolated data points from the spline model ############################
############################ Include interpolated data points into the base dataset ############################
# ggplot(tracks.1003, aes(x = tracks.1003$uid_object, y = tracks.1003$elevation)) + geom_point(shape = 5)
# with()
# within()
# aggregate()
# Title: WR575 GPS Track Records Cleaning
#
# Created by: R. Allen Gilbert Jr.
#
# Date created: 20160405
#
# Purpose: To process a NED 1/3 arc-second elevation surface for use in an agent-based model that models human movement
# across a snow surface.
#
# Process: The ~10m elevation model is first resampled to 1m cells. Surface roughness is created by adding randomly
# generated values to the existing resampled surface. The user creates a snow surface by adding the desired depth of
# snow to the surface roughness layer and applying a low pass filter to smooth the result. The user creates a depth
# reference layer by subtracting the surface roughness layer from the snow layer. If the underlying surface roughness
# layer is above the snow surface, the value is set to 0 to indicate a depth of 0. This depth surface is exported
# for use in the model. Adjustments are made to the snow surface layer by adding the height of those cells that
# were above the snow during the creation of the depth reference layer. Finally, local slope is calculated and exported
# for use in the model.
############################ Set working directory and load libraries ############################
setwd("C:/Users/Allen/Google Drive/01_Thesis")
library(ggplot2)
library(tidyr)
library(forecast)
library(plyr)
############################ Create datasets ############################
personalUID <- read.csv("./personalUID.csv", header = TRUE)
tracks <- read.csv("./20160401_DryLakes_Survey/dataCombined.csv", header = TRUE)
tracks$uid_person <- as.factor(tracks$uid_person)
transect <- read.csv("./transect.csv", header = TRUE)
# hr.1004 <- read.csv("./20160401_DryLakes_Survey/Data_HeartRate/heartrate_20160401_fattor_clean.csv", header = TRUE)
############################ Rework data frames ############################
tracks.1003 <- tracks[which(tracks$uid_person == "1003"),]
tracks.1003.el <- ts(tracks.1003$elevation, start = min(tracks.1003$id_time), end = max(tracks.1003$id_time))
############################ Interpolation program ############################
test1 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation)
test2 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 2)
test3 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 10)
test4 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 20)
test5 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 50)
test6 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 100)
get.spline.info <- function(object)
{
data.frame(x = object$x, y = object$y, df = object$df)
}
splineDF <- ldply(list(test1,test2,test3,test4,test5,test6),get.spline.info)
head(splineDF)
############################ Create graphics ############################
tracks.1003.plot <- ggplot(tracks.1003, aes(x = id_time, y = elevation)) + geom_point()
tracks.1003.plot + geom_line(data = splineDF, aes(x = x, y = y, color = factor(round(df,0)), group = df)) +
scale_color_discrete("Degrees of \nFreedom") +
xlab("Time [Julian]") +
ylab("Elevation [m]")
test6.plot <- get.spline.info(test6)
tracks.1003.plot + geom_line(data = test6.plot, aes(x = x, y = y)) +
xlab("Time [Julian]") +
ylab("Elevation [m]")
############################ Retreive interpolated data points from the spline model ############################
############################ Include interpolated data points into the base dataset ############################
# ggplot(tracks.1003, aes(x = tracks.1003$uid_object, y = tracks.1003$elevation)) + geom_point(shape = 5)
# with()
# within()
# aggregate()
test7 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 608)
test7 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 600)
test7.plot <- get.spline.info(test7)
tracks.1003.plot + geom_line(data = test7.plot, aes(x = x, y = y)) +
xlab("Time [Julian]") +
ylab("Elevation [m]")
toPlot <- function(testFile)
{
testFile.plot <- get.spline.info(testFile)
tracks.1003.plot + geom_line(data = testFile.plot, aes(x = x, y = y)) +
xlab("Time [Julian]") +
ylab("Elevation [m]")
}
toPlot(test4)
toPlot <- function(testFile)
{
testFile.plot <- get.spline.info(testFile)
tracks.1003.plot + geom_line(data = testFile.plot, aes(x = x, y = y)) +
xlab("Time [Julian]") +
ylab("Elevation [m]") +
title("/ntestFile")
}
toPlot(test4)
toPlot <- function(testFile)
{
testFile.plot <- get.spline.info(testFile)
tracks.1003.plot + geom_line(data = testFile.plot, aes(x = x, y = y)) +
xlab("Time [Julian]") +
ylab("Elevation [m]") +
title("testFile")
}
toPlot(test4)
toPlot <- function(testFile)
{
testFile.plot <- get.spline.info(testFile)
tracks.1003.plot + geom_line(data = testFile.plot, aes(x = x, y = y)) +
xlab("Time [Julian]") +
ylab("Elevation [m]") +
title(testFile)
}
toPlot(test4)
toPlot <- function(testFile)
{
testFile.plot <- get.spline.info(testFile)
tracks.1003.plot + geom_line(data = testFile.plot, aes(x = x, y = y)) +
xlab("Time [Julian]") +
ylab("Elevation [m]") +
ggtitle(testFile)
}
toPlot(test4)
toPlot <- function(testFile)
{
testFile.plot <- get.spline.info(testFile)
tracks.1003.plot + geom_line(data = testFile.plot, aes(x = x, y = y)) +
xlab("Time [Julian]") +
ylab("Elevation [m]") +
ggtitle("testFile")
}
toPlot(test4)
toPlot <- function(testFile)
{
testFile.plot <- get.spline.info(testFile)
tracks.1003.plot + geom_line(data = testFile.plot, aes(x = x, y = y)) +
xlab("Time [Julian]") +
ylab("Elevation [m]") +
ggtitle("\ntestFile")
}
toPlot(test4)
toPlot <- function(testFile)
{
testFile.plot <- get.spline.info(testFile)
tracks.1003.plot + geom_line(data = testFile.plot, aes(x = x, y = y)) +
xlab("Time [Julian]") +
ylab("Elevation [m]") +
ggtitle(testFile)
}
toPlot <- function(testFile)
{
testFile.plot <- get.spline.info(testFile)
tracks.1003.plot + geom_line(data = testFile.plot, aes(x = x, y = y)) +
xlab("Time [Julian]") +
ylab("Elevation [m]") +
ggtitle(as.string(testFile))
}
toPlot(test4)
toPlot <- function(testFile)
{
testFile.plot <- get.spline.info(testFile)
tracks.1003.plot + geom_line(data = testFile.plot, aes(x = x, y = y)) +
xlab("Time [Julian]") +
ylab("Elevation [m]") +
ggtitle(as.name(testFile))
}
toPlot(test4)
toPlot <- function(testFile)
{
testFile.plot <- get.spline.info(testFile)
tracks.1003.plot + geom_line(data = testFile.plot, aes(x = x, y = y)) +
xlab("Time [Julian]") +
ylab("Elevation [m]") +
ggtitle(as.factor(testFile))
}
toPlot(test4)
toPlot <- function(testFile)
{
testFile.plot <- get.spline.info(testFile)
tracks.1003.plot + geom_line(data = testFile.plot, aes(x = x, y = y)) +
xlab("Time [Julian]") +
ylab("Elevation [m]") +
ggtitle(as.character(testFile))
}
toPlot(test4)
toPlot <- function(testFile, title)
{
testFile.plot <- get.spline.info(testFile)
tracks.1003.plot + geom_line(data = testFile.plot, aes(x = x, y = y)) +
xlab("Time [Julian]") +
ylab("Elevation [m]") +
ggtitle(title)
}
toPlot(test4, "df 20")
