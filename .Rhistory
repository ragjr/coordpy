# Created by: R. Allen Gilbert Jr.
#
# Date created: 20160405
#
# Purpose: To process a NED 1/3 arc-second elevation surface for use in an agent-based model that models human movement
# across a snow surface.
#
# Process: The ~10m elevation model is first resampled to 1m cells. Surface roughness is created by adding randomly
# generated values to the existing resampled surface. The user creates a snow surface by adding the desired depth of
# snow to the surface roughness layer and applying a low pass filter to smooth the result. The user creates a depth
# reference layer by subtracting the surface roughness layer from the snow layer. If the underlying surface roughness
# layer is above the snow surface, the value is set to 0 to indicate a depth of 0. This depth surface is exported
# for use in the model. Adjustments are made to the snow surface layer by adding the height of those cells that
# were above the snow during the creation of the depth reference layer. Finally, local slope is calculated and exported
# for use in the model.
############################ Set working directory and load libraries ############################
setwd("C:/Users/Allen/Google Drive/01_Thesis")
rm(list=ls())
library(ggplot2)
library(tidyr)
library(forecast)
library(plyr)
############################ Create datasets ############################
personalUID <- read.csv("./personalUID.csv", header = TRUE)
tracks <- read.csv("./20160401_DryLakes_Survey/dataCombined.csv", header = TRUE)
tracks$uid_person <- as.factor(tracks$uid_person)
transect <- read.csv("./transect.csv", header = TRUE)
# hr.1004 <- read.csv("./20160401_DryLakes_Survey/Data_HeartRate/heartrate_20160401_fattor_clean.csv", header = TRUE)
############################ Rework data frames ############################
tracks.1003 <- tracks[which(tracks$uid_person == "1003"),]
tracks.1003.el <- ts(tracks.1003$elevation, start = min(tracks.1003$id_time), end = max(tracks.1003$id_time))
############################ Interpolation program ############################
test1 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation)
test2 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 2)
test3 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 10)
test4 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 20)
test5 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 50)
test6 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 100)
test7 <- smooth.spline(x = tracks.1003$id_time, y = tracks.1003$elevation, df = 600) # 600 df written however, the max is 127 and the program defaults to that.
get.spline.info <- function(object)
{
data.frame(x = object$x, y = object$y, df = object$df)
}
splineDF <- ldply(list(test1,test2,test3,test4,test5,test6,test7),get.spline.info)
head(splineDF)
############################ Create graphics ############################
tracks.1003.plot <- ggplot(tracks.1003, aes(x = id_time, y = elevation)) + geom_point()
tracks.1003.plot + geom_line(data = splineDF, aes(x = x, y = y, color = factor(round(df,0)), group = df)) +
scale_color_discrete("Degrees of \nFreedom") +
xlab("Time [Julian]") +
ylab("Elevation [m]")
toPlot <- function(testFile)
{
testFile.plot <- get.spline.info(testFile)
tracks.1003.plot + geom_line(data = testFile.plot, aes(x = x, y = y)) +
xlab("Time [Julian]") +
ylab("Elevation [m]") +
ggtitle(round(max(testFile$df),0))
}
toPlot(test7)
############################ Retreive interpolated data points from the spline model ############################
# How can I take modeled data that used a spline interpolation technique and transform it into a data frame?
elBySec <- ddply(tracks.1003, "id_time", summarize,
el.mean = mean(elevation), el.sd = sd(elevation),
Length = NROW(elevation),
tfrac = qt(p = .90, df = Length - 1),
Lower = el.mean - tfrac * el.sd / sqrt(Length),
Upper = el.mean + tfrac * el.sd / sqrt(Length)
)
elInfo <- summary(test7)
elCoef <- as.data.frame(elInfo$coefficients[,1:2])
############################ Include interpolated data points into the base dataset ############################
# with()
# within()
# aggregate()
# Title: WR575 GPS Track Records Cleaning
#
# Created by: R. Allen Gilbert Jr.
#
# Date created: 20160405
#
# Purpose: To process a NED 1/3 arc-second elevation surface for use in an agent-based model that models human movement
# across a snow surface.
#
# Process: The ~10m elevation model is first resampled to 1m cells. Surface roughness is created by adding randomly
# generated values to the existing resampled surface. The user creates a snow surface by adding the desired depth of
# snow to the surface roughness layer and applying a low pass filter to smooth the result. The user creates a depth
# reference layer by subtracting the surface roughness layer from the snow layer. If the underlying surface roughness
# layer is above the snow surface, the value is set to 0 to indicate a depth of 0. This depth surface is exported
# for use in the model. Adjustments are made to the snow surface layer by adding the height of those cells that
# were above the snow during the creation of the depth reference layer. Finally, local slope is calculated and exported
# for use in the model.
############################ Set working directory and load libraries ############################
setwd("C:/Users/Allen/Google Drive/01_Thesis")
rm(list=ls())
library(ggplot2)
library(tidyr)
library(forecast)
library(plyr)
############################ Create metadatasets ############################
personalUID <- read.csv("./personalUID.csv", header = TRUE)
transect <- read.csv("./transect.csv", header = TRUE)
phoneMeta <- read.csv("./phoneMeta.csv", header = TRUE)
appMeta <- read.csv("./appMeta.csv", header = TRUE)
############################ Create datasets ############################
tracksDL <- read.csv("./20160401_DryLakes_Survey/Tracks_20160401_DryLakes.csv", header = TRUE)
tracksDL$uid_person <- as.factor(tracksDL$uid_person)
heartDL <- read.csv("./20160401_DryLakes_Survey/HeartRate_20160401_DryLakes.csv", header = TRUE)
heartDL$uid_person <- as.factor(heartDL$uid_person)
surveyDL <- read.csv("./20160401_DryLakes_Survey/WR575_S2016_Dry_Lake_SNOTEL_snow_depth.csb",header = TRUE)
tracksJW <- read.csv("./20160430_JoeWright_Survey/Tracks_20160430_JoeWright.csv", header = TRUE)
tracksJW$uid_person <- as.factor(tracksJW$uid_person)
heartJW <- read.csv("./20160430_JoeWright_Survey/HeartRate_20160430_JoeWright.csv", header = TRUE)
heartJW$uid_person <- as.factor(heartJW$uid_person)
############################ Rework data frames ############################
tracks.1003 <- tracks[which(tracks$uid_person == "1003"),]
tracks.1003.el <- ts(tracks.1003$elevation, start = min(tracks.1003$id_time), end = max(tracks.1003$id_time))
surveyDL <- read.csv("./20160401_DryLakes_Survey/WR575_S2016_Dry_Lake_SNOTEL_snow_depth.csv",header = TRUE)
View(surveyDL)
View(phoneMeta)
View(personalUID)
View(appMeta)
View(heartDL)
View(surveyDL)
ggplot(tracksDL, aes(x = id_time, y = elevation))
ggplot(tracksDL, aes(x = id_time, y = elevation)) + facet_wrap(~uid_person) + geom_line()
View(tracksDL)
ggplot(tracksDL, aes(x = utm_east, y = utm_north)) + facet_wrap(~uid_person) + geom_line()
View(personalUID)
summary(tracksDL$elevation)
personalUID <- read.csv("./metaPersonalUID.csv", header = TRUE)
transect <- read.csv("./metaTransectAssignment.csv", header = TRUE)
phoneMeta <- read.csv("./metaPhone.csv", header = TRUE)
appMeta <- read.csv("./metaApplication.csv", header = TRUE)
heartJW <- read.csv("./20160430_JoeWright_Survey/HeartRate_20160430_JoeWright.csv", header = TRUE)
heartJW$uid_person <- as.factor(heartJW$uid_person)
heartDL <- read.csv("./20160401_DryLakes_Survey/HeartRate_20160401_DryLakes.csv", header = TRUE)
heartDL$uid_person <- as.factor(heartDL$uid_person)
View(heartDL)
ggplot(heartDL[which(uid_person = 1002)], aes(x = id_time, y = heartDL$exertion)) + facet_wrap(~uid_person) + geom_line()
ggplot(heartDL[which(uid_person = "1002")], aes(x = id_time, y = heartDL$exertion)) + facet_wrap(~uid_person) + geom_line()
ggplot(heartDL[uid_person == "1002"], aes(x = id_time, y = heartDL$exertion)) + facet_wrap(~uid_person) + geom_line()
ggplot(heartDL[which(uid_person == "1002")], aes(x = id_time, y = heartDL$exertion)) + facet_wrap(~uid_person) + geom_line()
ggplot(heartDL[which(heartDL$uid_person == "1002")], aes(x = id_time, y = heartDL$exertion)) + facet_wrap(~uid_person) + geom_line()
ggplot(heartDL[which(heartDL$uid_person == "1002")], aes(x = id_time, y = heartDL$exertion)) + geom_line()
View(heartDL)
ggplot(heartDL[which(heartDL$uid_person == "1004")], aes(x = id_time, y = heartDL$exertion)) + geom_line()
ggplot(heartDL[which(heartDL$uid_person == "1004")], aes(x = heartDL$id_time, y = heartDL$exertion)) + geom_line()
ggplot(heartDL, aes(x = ~id_time, y = ~exertion)) + facet_wrap(~uid_person) + geom_line()
ggplot(heartDL, aes(x = id_time, y = exertion)) + facet_wrap(~uid_person) + geom_line()
ggplot(heartDL[which(heartDL$uid_person == "1004")], aes(x = id_time, y = exertion)) + geom_line()
ggplot(heartDL[which(heartDL$uid_person == "1006")], aes(x = id_time, y = exertion)) + geom_line()
head(tracksDL[which(uid_person == "1004")])
head(tracksDL[which(tracksDL$uid_person == "1004")])
head(tracksDL[$uid_person == "1004"])
head(tracksDL[~uid_person == "1004"])
head(tracksDL$uid_person[1004])
ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion)) + geom_line()
ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion)) + geom_line(alpha(alpha = 50))
ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion)) + geom_line(alpha(alpha = .5))
ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion)) + geom_line(alpha(alpha = 5))
ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion)) + geom_line(alpha(5))
ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion)) + geom_line(alpha = 0.5)
ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion))
+ geom_line(alpha = 0.5)
+ geom_line(data = tracksDL, aes(x = tracksDL$id_time, y = tracksDL$elevation))
ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion))
+ geom_line(alpha = 0.5)
+ geom_line(data = tracksDL$elevation)
ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion))
+ geom_line(alpha = 0.5)
+ geom_line(data = as.factor(tracksDL$elevation))
setwd("C:/Users/Allen/Google Drive/01_Thesis")
rm(list=ls())
library(ggplot2)
library(tidyr)
library(forecast)
library(plyr)
############################ Create metadatasets ############################
personalUID <- read.csv("./metaPersonalUID.csv", header = TRUE)
transect <- read.csv("./metaTransectAssignment.csv", header = TRUE)
phoneMeta <- read.csv("./metaPhone.csv", header = TRUE)
appMeta <- read.csv("./metaApplication.csv", header = TRUE)
tracksDL <- read.csv("./20160401_DryLakes_Survey/Tracks_20160401_DryLakes.csv", header = TRUE)
tracksDL$uid_person <- as.factor(tracksDL$uid_person)
heartDL <- read.csv("./20160401_DryLakes_Survey/HeartRate_20160401_DryLakes.csv", header = TRUE)
heartDL$uid_person <- as.factor(heartDL$uid_person)
surveyDL <- read.csv("./20160401_DryLakes_Survey/WR575_S2016_Dry_Lake_SNOTEL_snow_depth.csv",header = TRUE)
tracksJW <- read.csv("./20160430_JoeWright_Survey/Tracks_20160430_JoeWright.csv", header = TRUE)
tracksJW$uid_person <- as.factor(tracksJW$uid_person)
heartJW <- read.csv("./20160430_JoeWright_Survey/HeartRate_20160430_JoeWright.csv", header = TRUE)
heartJW$uid_person <- as.factor(heartJW$uid_person)
surveyDL <- read.csv("./20160401_DryLakes_Survey/WR575_S2016_DryLake_SnowDepthSurvey.csv", header = TRUE)
surveyJW <- read.csv("./20150430_JoeWright_Survey/WR575_S2016_JoeWright_SnowDepthSurvey.csv", header = TRUE)
surveyJW <- read.csv("./20160430_JoeWright_Survey/WR575_S2016_JoeWright_SnowDepthSurvey.csv", header = TRUE)
surveyDL <- read.csv("./20160401_DryLakes_Survey/WR575_S2016_DryLake_SnowDepthSurvey.csv", header = TRUE)
surveyDL$uid_person <- as.factor(surveyDL$uid_person)
surveyJW <- read.csv("./20160430_JoeWright_Survey/WR575_S2016_JoeWright_SnowDepthSurvey.csv", header = TRUE)
surveyJW$uid_person <- as.factor(surveyJW$uid_person)
ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion)) + geom_line(alpha = 0.5) + geom_line(data = tracksDL$elevation)
ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion))
+ geom_line(alpha = 0.5)
ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion)) + geom_line()
ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion)) + geom_line(alpha(0.5))
ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion, alpha(0.5))) + geom_line(alpha(0.5))
ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion)) + geom_line(alpha = 0.5)
p1006 <- p1006 + geom_line(data = tracksDL, aes(x = id_time, y = elevation))
p1006 <- ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion)) + geom_line(alpha = 0.5)
p1006 <- p1006 + geom_line(data = tracksDL, aes(x = id_time, y = elevation))
p1006 <- ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion)) +
geom_line(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Exertion [% of Max]")
p1006 <- ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion)) +
geom_line(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Exertion [% of Max]")
p1006 <- p1006 + geom_line(data = tracksDL, aes(x = id_time, y = elevation))
p1006
p1006 <- ggplot(heartDL[which(heartDL$uid_person == "1006"),], aes(x = id_time, y = exertion)) +
geom_line(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Exertion [% of Max]")
p1006
compareDL <- ggplot(tracksDL, aes(x = id_time, y = elevation)) +
geom_area(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]")
compareDL
compareDL <- ggplot(tracksDL, aes(x = id_time, y = elevation)) +
geom_area(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]") +
facet_wrap(uid_person)
compareDL <- ggplot(tracksDL, aes(x = id_time, y = elevation)) +
geom_area(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]") +
facet_wrap(~uid_person)
compareDL
plot.trackEL <- ggplot(tracksDL, aes(x = id_time, y = elevation)) +
geom_area(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]") +
facet_wrap(~uid_person)
plotDL.heartEL <- ggplot(heartDL, aes(x = id_time, y = elevation)) +
geom_area(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]")
plotDL.trackEL <- ggplot(tracksDL, aes(x = id_time, y = elevation)) +
geom_area(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]")
plotDL.trackEL <- ggplot(tracksDL, aes(x = id_time, y = elevation, color = "Black")) +
geom_area(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]")
plotDL.heartEL <- ggplot(heartDL, aes(x = id_time, y = elevation, color = "Red")) +
geom_area(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]")
plotDL.trackEL + plotDL.heartEL + facet_wrap(~uid_person)
plotDL.trackEL + plotDL.heartEL
plotDL.trackEL + plotDL.heartEL
plotDL.heartEL <- geom_area(heartDL, aes(x = id_time, y = elevation, color = "Red"), alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]")
ggplot() + plotDL.heartEL
plotDL.trackEL + plotDL.heartEL
plotDL.trackEL + plotDL.heartEL + facet_wrap(~uid_person)
plotDL.trackEL
plotDL.trackEL + facet_wrap(~uid_person)
plotDL.trackEL <- ggplot(tracksDL, aes(x = id_time, y = elevation), color = "Black") +
geom_area(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]")
plotDL.trackEL + facet_wrap(~uid_person)
plotDL.trackEL + plotDL.heartEL + facet_wrap(~uid_person)
compare <- plotDL.trackEL + plotDL.heartEL + facet_wrap(~uid_person)
plotDL.trackEL + geom_area(heartDL, aes(x = id_time, y = elevation), color = "Red", alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]") + facet_wrap(~uid_person)
ggplot() + plotDL.heartEL + facet_wrap(~uid_person)
plotDL.heartEL <- geom_area(data = heartDL, aes(x = id_time, y = elevation), color = "Red", alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]")
rm(list=ls())
tracksDL <- read.csv("./20160401_DryLakes_Survey/Tracks_20160401_DryLakes.csv", header = TRUE)
tracksDL$uid_person <- as.factor(tracksDL$uid_person)
heartDL <- read.csv("./20160401_DryLakes_Survey/HeartRate_20160401_DryLakes.csv", header = TRUE)
heartDL$uid_person <- as.factor(heartDL$uid_person)
plotDL.trackEL <- ggplot(tracksDL, aes(x = id_time, y = elevation), color = "Black") +
geom_area(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]") +
facet_wrap(~uid_person)
plotDL.trackEL
plotDL.heartEL <- geom_area(data = heartDL, aes(x = id_time, y = elevation), color = "Red", alpha = 0.5)
plotDL.trackEL + plotDL.heartEL
plotDL.trackEL <- ggplot(tracksDL, aes(x = id_time, y = elevation, ymin = min(elevation), ymax = max(elevation)), color = "Black") +
geom_area(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]") +
facet_wrap(~uid_person)
plotDL.trackEL
plotDL.trackEL
plotDL.trackEL <- ggplot(tracksDL, aes(x = id_time, y = elevation, ymin = min(tracksDL$elevation), ymax = max(tracksDL$elevation)), color = "Black") +
geom_area(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]") +
facet_wrap(~uid_person)
plotDL.trackEL
plotDL.trackEL <- ggplot(tracksDL, aes(x = id_time, y = elevation, ymin = 2500, ymax = max(tracksDL$elevation)), color = "Black") +
geom_area(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]") +
facet_wrap(~uid_person)
plotDL.trackEL
plotDL.trackEL <- ggplot(tracksDL, aes(x = id_time, y = elevation)), color = "Black") +
geom_area(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]") +
ymin(min(tracksDL$elevation))
facet_wrap(~uid_person)
plotDL.trackEL <- ggplot(tracksDL, aes(x = id_time, y = elevation)), color = "Black") +
geom_area(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]") +
ymin(min(tracksDL$elevation)) +
facet_wrap(~uid_person)
plotDL.trackEL <- ggplot(tracksDL, aes(x = id_time, y = elevation)), color = "Black") +
geom_area(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]") +
#ymin(min(tracksDL$elevation)) +
facet_wrap(~uid_person)
plotDL.trackEL <- ggplot(tracksDL, aes(x = id_time, y = elevation), color = "Black") +
geom_area(alpha = 0.5) +
xlab("Time [Julian Seconds]") +
ylab("Elevation [m]") +
facet_wrap(~uid_person)
setwd("C:/Users/Allen/Google Drive/01_Thesis")
rm(list=ls())
library(ggplot2)
library(tidyr)
library(forecast)
library(plyr)
############################ Create metadatasets ############################
personalUID <- read.csv("./metaPersonalUID.csv", header = TRUE)
transect <- read.csv("./metaTransectAssignment.csv", header = TRUE)
phoneMeta <- read.csv("./metaPhone.csv", header = TRUE)
appMeta <- read.csv("./metaApplication.csv", header = TRUE)
############################ Create datasets ############################
tracksDL <- read.csv("./20160401_DryLakes_Survey/Tracks_20160401_DryLakes.csv", header = TRUE)
tracksDL$uid_person <- as.factor(tracksDL$uid_person)
heartDL <- read.csv("./20160401_DryLakes_Survey/HeartRate_20160401_DryLakes.csv", header = TRUE)
heartDL$uid_person <- as.factor(heartDL$uid_person)
tracksJW <- read.csv("./20160430_JoeWright_Survey/Tracks_20160430_JoeWright.csv", header = TRUE)
tracksJW$uid_person <- as.factor(tracksJW$uid_person)
heartJW <- read.csv("./20160430_JoeWright_Survey/HeartRate_20160430_JoeWright.csv", header = TRUE)
heartJW$uid_person <- as.factor(heartJW$uid_person)
surveyDL <- read.csv("./20160401_DryLakes_Survey/WR575_S2016_DryLake_SnowDepthSurvey.csv", header = TRUE)
surveyDL$uid_person <- as.factor(surveyDL$uid_person)
surveyJW <- read.csv("./20160430_JoeWright_Survey/WR575_S2016_JoeWright_SnowDepthSurvey.csv", header = TRUE)
surveyJW$uid_person <- as.factor(surveyJW$uid_person)
ggplot(tracksDL, aes(x = id_time, y = elevation)) + facet_wrap(~uid_person) + geom_line()
ggplot(heartDL, aes(x = id_time, y = exertion)) + facet_wrap(~uid_person) + geom_line()
setwd("C:/Users/Allen/Google Drive/01_Thesis")
rm(list=ls())
library(ggplot2)
library(tidyr)
library(forecast)
library(plyr)
library(raster)
library(sp)
library(rasterVis)
tracksDL <- read.csv("./GIS/ABM_SnowSurvey/Exports/20160401_DryLakes_Tracks.csv", header = TRUE)
tracksDL$uid_person <- as.factor(tracksDL$uid_person)
tracksDL <- tracksDL[which(tracksDL$set == "During"),]
heartDL <- read.csv("./GIS/ABM_SnowSurvey/Exports/20160401_DryLakes_HeartRate.csv", header = TRUE)
heartDL$uid_person <- as.factor(heartDL$uid_person)
heartDL <- heartDL[which(heartDL$set == "During"),]
elevationDL <- read.table("./GIS/ABM_SnowSurvey/Exports/Ideal_Elevation.txt", header = TRUE, sep = "")
elevationDL$uid_person <- as.factor(elevationDL$uid_person)
tracksJW <- read.csv("./GIS/ABM_SnowSurvey/Exports/20160430_JoeWright_Tracks.csv", header = TRUE)
tracksJW$uid_person <- as.factor(tracksJW$uid_person)
tracksJW <- tracksJW[which(tracksJW$set == "During"),]
heartJW <- read.csv("./GIS/ABM_SnowSurvey/Exports/20160430_JoeWright_HeartRate.csv", header = TRUE)
heartJW$uid_person <- as.factor(heartJW$uid_person)
heartJW <- heartJW[which(heartJW$set == "During"),]
elevationJW <- read.table("./GIS/ABM_SnowSurvey/Exports/Ideal_Elevation_JW.txt", header = TRUE, sep = "")
elevationJW$uid_person <- as.factor(elevationJW$uid_person)
plot.all.elevation <- function(WD,trackData,heartData,elData,area)
{
setwd("C:/Users/Allen/Google Drive/01_Thesis")
setwd(sprintf("./%s", WD))
elData.minEl <- round_any(min(elData$elevation),accuracy = 100,floor)
elData.maxEl <- round_any(max(elData$elevation),accuracy = 100,ceiling)
plot.base.elData <- ggplot(elData, aes(x = id_time, y = elevation)) +
geom_ribbon(aes(ymin = elData.minEl,ymax = elevation, alpha = 0.1)) +
ylim(elData.minEl,elData.maxEl) +
xlab("Position Index") +
ylab("Elevation [m]") +
ggtitle("NED Elevation") +
facet_wrap(~uid_person)
plot.trackData.elevation <- geom_line(data = trackData, aes(x = id_time, y = elevation), color = "Red", size = 1, alpha = 0.5)
plot.heartData.elevation <- geom_line(data = heartData, aes(x = id_time, y = elevation), color = "Dark Green")
plot.base.elevationDL +
plot.trackData.elevation +
plot.heartData.elevation +
xlab("Time [Julian Seconds]")
ggtitle("Elevation by Individual") +
theme_light()
ggsave(sprintf("%s_elevation_overview.png", area))
setwd("C:/Users/Allen/Google Drive/01_Thesis")
}
plot.all.elevation(WD = "comparison",trackData = tracksJW,heartData = heartJW,elData = elevationJW,area = "Joe Wright")
plot.all.elevation <- function(WD,trackData,heartData,elData,area)
{
setwd("C:/Users/Allen/Google Drive/01_Thesis")
setwd(sprintf("./%s", WD))
elData.minEl <- round_any(min(elData$elevation),accuracy = 100,floor)
elData.maxEl <- round_any(max(elData$elevation),accuracy = 100,ceiling)
plot.base.elData <- ggplot(elData, aes(x = id_time, y = elevation)) +
geom_ribbon(aes(ymin = elData.minEl,ymax = elevation, alpha = 0.1)) +
ylim(elData.minEl,elData.maxEl) +
xlab("Position Index") +
ylab("Elevation [m]") +
ggtitle("NED Elevation") +
facet_wrap(~uid_person)
plot.trackData.elevation <- geom_line(data = trackData, aes(x = id_time, y = elevation), color = "Red", size = 1, alpha = 0.5)
plot.heartData.elevation <- geom_line(data = heartData, aes(x = id_time, y = elevation), color = "Dark Green")
plot.base.elData +
plot.trackData.elevation +
plot.heartData.elevation +
xlab("Time [Julian Seconds]")
ggtitle("Elevation by Individual") +
theme_light()
ggsave(sprintf("%s_elevation_overview.png", area))
setwd("C:/Users/Allen/Google Drive/01_Thesis")
}
plot.all.elevation(WD = "comparison",trackData = tracksJW,heartData = heartJW,elData = elevationJW,area = "Joe Wright")
plot.comparison <- function(WD,trackData,heartData,elData,uid,area)
{
setwd("C:/Users/Allen/Google Drive/01_Thesis")
setwd(sprintf("./%s", WD))
elData.uid <- elData[which(elData$uid_person == uid),]
elData.uid <- subset(elData.uid, select = c(3,4))
elData.uid$exertion <- "NULL"
elData.uid$panel <- "Elevation"
elMin.uid <- round_any(min(elData.uid$elevation),accuracy = 100,floor)
elMax.uid <- round_any(max(elData.uid$elevation),accuracy = 100,ceiling)
trackData.uid <- trackData[which(trackData$uid_person == uid),]
trackData.uid <- subset(trackData.uid, select = c(3,6))
trackData.uid$exertion <- "NULL"
trackData.uid$panel <- "Elevation"
heartData.uid.el <- heartData[which(heartData$uid_person == uid),]
heartData.uid.el <- subset(heartData.uid.el, select = c(4,6,11))
heartData.uid.el$panel <- "Elevation"
heartData.uid.hr <- heartData[which(heartData$uid_person == uid),]
heartData.uid.hr <- subset(heartData.uid.hr, select = c(4,6,11))
heartData.uid.hr$panel <- "Exertion"
combined.uid <- rbind(elData.uid,trackData.uid,heartData.uid.el,heartData.uid.hr)
ggplot(data = combined.uid) +
facet_grid(panel~., scales = "free") +
geom_ribbon(data = elData.uid, aes(x = id_time, ymin = elMin.uid, ymax = elevation, alpha = 0.1)) +
ylab("Comparison") +
geom_line(data = trackData.uid, aes(x = id_time, y = elevation), color = "Red", size = 2, alpha = 0.5) +
geom_line(data = heartData.uid.el, aes(x = id_time, y = elevation), color = "Dark Green") +
geom_line(data = heartData.uid.hr, aes(x = id_time, y = exertion), color = "Blue") +
ggtitle(sprintf("Personal Identifier: %s", uid)) +
xlab("Time [Julian Seconds]") +
theme_light()
ggsave(sprintf("%s_%s_summary.png", area, uid))
setwd("C:/Users/Allen/Google Drive/01_Thesis")
#remove(elMin.uid,elMax.uid,combined.uid,elData.uid,tracksDL.uid,heartDL.uid.el,heartDL.uid.hr)
}
plot.comparison(WD = "comparison", trackData = tracksDL, heartData = heartDL, elData = elevationDL, uid = 1001, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksDL, heartData = heartDL, elData = elevationDL, uid = 1002, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksDL, heartData = heartDL, elData = elevationDL, uid = 1004, area = "Dry Lakes")
summary.HR.DL <- summary(heartDL$uid_person)
summary(heartDL$uid_person)
summary.HR.DL <- list(summary(heartDL$uid_person))
summary(heartDL$uid_person)
plot.comparison(WD = "comparison", trackData = tracksDL, heartData = heartDL, elData = elevationDL, uid = 1006, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksDL, heartData = heartDL, elData = elevationDL, uid = 1007, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksDL, heartData = heartDL, elData = elevationDL, uid = 1008, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksDL, heartData = heartDL, elData = elevationDL, uid = 1012, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksDL, heartData = heartDL, elData = elevationDL, uid = 1014, area = "Dry Lakes")
summary(heartJW$uid_person)
plot.comparison(WD = "comparison", trackData = tracksJW, heartData = heartJW, elData = elevationJW, uid = 1004, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksJW, heartData = heartJW, elData = elevationJW, uid = 1006, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksJW, heartData = heartJW, elData = elevationJW, uid = 1009, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksJW, heartData = heartJW, elData = elevationJW, uid = 1010, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksJW, heartData = heartJW, elData = elevationJW, uid = 1011, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksJW, heartData = heartJW, elData = elevationJW, uid = 1012, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksJW, heartData = heartJW, elData = elevationJW, uid = 1016, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksJW, heartData = heartJW, elData = elevationJW, uid = 1004, area = "Joe Wright")
plot.comparison(WD = "comparison", trackData = tracksDL, heartData = heartDL, elData = elevationDL, uid = 1004, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksDL, heartData = heartDL, elData = elevationDL, uid = 1006, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksDL, heartData = heartDL, elData = elevationDL, uid = 1007, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksDL, heartData = heartDL, elData = elevationDL, uid = 1008, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksDL, heartData = heartDL, elData = elevationDL, uid = 1012, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksDL, heartData = heartDL, elData = elevationDL, uid = 1014, area = "Dry Lakes")
plot.comparison(WD = "comparison", trackData = tracksJW, heartData = heartJW, elData = elevationJW, uid = 1004, area = "Joe Wright")
summary(heartJW$uid_person)
plot.comparison(WD = "comparison", trackData = tracksJW, heartData = heartJW, elData = elevationJW, uid = 1006, area = "Joe Wright")
plot.comparison(WD = "comparison", trackData = tracksJW, heartData = heartJW, elData = elevationJW, uid = 1009, area = "Joe Wright")
plot.comparison(WD = "comparison", trackData = tracksJW, heartData = heartJW, elData = elevationJW, uid = 1010, area = "Joe Wright")
plot.comparison(WD = "comparison", trackData = tracksJW, heartData = heartJW, elData = elevationJW, uid = 1011, area = "Joe Wright")
plot.comparison(WD = "comparison", trackData = tracksJW, heartData = heartJW, elData = elevationJW, uid = 1012, area = "Joe Wright")
plot.comparison(WD = "comparison", trackData = tracksJW, heartData = heartJW, elData = elevationJW, uid = 1016, area = "Joe Wright")
