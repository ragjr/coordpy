import cv2, os, csv
import Tkinter as tk
import matplotlib.pyplot as plt
import numpy as np

var = 'C:/Users/rallengilbertjr/Desktop/CoursenessCoefficient/20161224/nikon_d810/tif/test/CSU_2916_cvt.tif'
img = cv2.imread(var,1)

######################### split and display the individual channels
rf = 10

b,g,r = cv2.split(img)
r1, c1 = b.shape

b = cv2.resize(b, (c1/rf, r1/rf), 0, 0, cv2.INTER_NEAREST)
g = cv2.resize(g, (c1/rf, r1/rf), 0, 0, cv2.INTER_NEAREST)
r = cv2.resize(r, (c1/rf, r1/rf), 0, 0, cv2.INTER_NEAREST)

h = np.hstack((b,g,r))
cv2.imshow('all', h)
cv2.waitKey(0)
cv2.destroyAllWindows()

######################### applying a histogram equalization
b,g,r = cv2.split(img)
r1, c1 = b.shape

b = cv2.equalizeHist(b)
g = cv2.equalizeHist(g)
r = cv2.equalizeHist(r)

h = np.hstack((b,g,r))
cv2.imshow('all', h)
cv2.waitKey(0)
cv2.destroyAllWindows()

######################### applying a CLAHE histogram equalization
cl = 2.0
tgs = 8
clahe = cv2.createCLAHE(clipLimit = cl, tileGridSize = (tgs,tgs))

b,g,r = cv2.split(img)
r1, c1 = b.shape

b = clahe.apply(b)
g = clahe.apply(g)
r = clahe.apply(r)

h = np.hstack((b,g,r))
cv2.imshow('all', h)
cv2.waitKey(0)
cv2.destroyAllWindows()

######################### merge the channels into a single image
img = cv2.merge((b,g,r))

cv2.imshow('all', img)
cv2.waitKey(0)
cv2.destroyAllWindows()

############################################################## developing functions and a loop
import cv2, os, csv
import Tkinter as tk
import matplotlib.pyplot as plt
import numpy as np

DIR = 'C:/Users/rallengilbertjr/Desktop/CoursenessCoefficient/20170104//nikon_d810/tif/normal/'

DIR = 'C:/Users/rallengilbertjr/Desktop/CoursenessCoefficient/20170104//nikon_d810/tif/1stopIncrease/'

DIR = 'C:/Users/rallengilbertjr/Desktop/CoursenessCoefficient/20170104/nikon_d810/tif/2stopIncrease/'


#ls = ['normal/','1stopIncrease/','2stopIncrease/']

for path, dirs, files in os.walk(DIR):
    for filename in files:
        print('Processing: ' + filename)
        img = cv2.imread(path + filename,1)
        
        # split and display the individual channels
        #rf = 10
        b,g,r = cv2.split(img)
        #r1, c1 = b.shape
        #b = cv2.resize(b, (c1/rf, r1/rf), 0, 0, cv2.INTER_NEAREST)
        #g = cv2.resize(g, (c1/rf, r1/rf), 0, 0, cv2.INTER_NEAREST)
        #r = cv2.resize(r, (c1/rf, r1/rf), 0, 0, cv2.INTER_NEAREST)

        # applying a CLAHE histogram equalization
        cl = 2.0
        tgs = 8
        clahe = cv2.createCLAHE(clipLimit = cl, tileGridSize = (tgs,tgs))
        b,g,r = cv2.split(img)
        r1, c1 = b.shape
        b = clahe.apply(b)
        g = clahe.apply(g)
        r = clahe.apply(r)
        
        # merge the channels into a single image
        img = cv2.merge((b,g,r))
        
        # overwrite the existing image with the processed image
        cv2.imwrite(DIR + str(filename), img)
        print('Output to: ' + DIR + str(filename))
